# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

stages:
  - lint
  - test
  - docs
  - build
  - deploy

variables:
  PYTHON_VERSION: "3.11"
  DOCKER_HOST: "tcp://docker:2375"
  PROJECT_DIR: "/home/alg_edu/WDev/team_website"
  DATABASE_URL: "sqlite:///:memory:" 
  DJANGO_SETTINGS_MODULE: "AlgEdu_Team.settings"
  DOCS_OUTPUT_DIR: "public/docs"
  SERVER_IP: "87.228.77.37" 
  CPP_DEPLOY_DIR: "/var/cpp_apps/algedu_parser"
  CPP_EXE_NAME: "alg_edu_parser"

# ----------------------------
# –û–±—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –≤–µ—Ç–æ–∫
# ----------------------------

# –î–ª—è Python-–ø—Ä–æ–µ–∫—Ç–æ–≤ (WDev)
.wdev-rules: &wdev-rules
  rules:
    - if: '$CI_COMMIT_REF_NAME == "WDev"'
      changes:
        - team_website/**/*
        - application_website/**/*

# –î–ª—è C++-–ø—Ä–æ–µ–∫—Ç–∞ (DDev)
.ddev-rules: &ddev-rules
  rules:
    - if: '$CI_COMMIT_REF_NAME == "DDev"'
      changes:
        - application/**/*

# ----------------------------
# –ü—Ä–∞–≤–∏–ª–æ –¥–ª—è main-–≤–µ—Ç–∫–∏
# ----------------------------
.main-rules: &main-rules
  rules:
    - if: '$CI_COMMIT_REF_NAME == "main"'
  
# ----------------------------
# –≠—Ç–∞–ø: –õ–∏–Ω—Ç–∏–Ω–≥ Python (WDev)
# ----------------------------
python-lint:
  <<: *wdev-rules
  stage: lint
  image: python:${PYTHON_VERSION}
  before_script:
    - pip install pylint flake8 pylint-django 
    - pip install -r team_website/requirements.txt
  script:
    - |
      echo "Running Python linting..."
      export PYTHONPATH="$CI_PROJECT_DIR/team_website"
      for project in team_website application_website; do
        if [ -d "$project" ]; then
          echo "Linting $project"
          cd $project
          pylint --fail-under=5.0 \
                 --load-plugins=pylint_django \
                 --disable=missing-docstring,too-few-public-methods \
                 . || exit 1
          flake8 --max-line-length=120 .
          cd ..
        fi
      done

# ----------------------------
# –≠—Ç–∞–ø: –¢–µ—Å—Ç—ã Python (WDev)
# ----------------------------
python-tests:
  <<: *wdev-rules
  stage: test
  image: python:${PYTHON_VERSION}
  before_script:
    - pip install -r team_website/requirements.txt
    - pip install coverage  
  script:
    - |
      echo "Running Python tests..."
      set -x  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏: –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–ø–æ–ª–Ω—è–µ–º—ã–µ –∫–æ–º–∞–Ω–¥—ã

      # –ü—Ä–æ–≤–µ—Ä—è–µ–º team_website
      cd team_website
      python manage.py test main_app.tests --noinput --verbosity=2
      coverage run --source='main_app' manage.py test main_app.tests
      coverage report --fail-under=70 --show-missing

      # –ü—Ä–æ–≤–µ—Ä—è–µ–º application_website (–µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
      if [ -d "../application_website" ]; then
        cd ../application_website
        python manage.py test main_app.tests --noinput --verbosity=2
        coverage run --source='main_app' manage.py test main_app.tests
        coverage report --fail-under=70 --show-missing
      fi

# ----------------------------
# –≠—Ç–∞–ø: –õ–∏–Ω—Ç–∏–Ω–≥ C++ (DDev)
# ----------------------------
cpp-lint:
  <<: *ddev-rules
  stage: lint
  image: ubuntu:latest
  before_script:
    - apt-get update -qq
    - apt-get install -y git python3 cpplint
  script:
    - |
      echo "Running C++ linting..."
      cpplint --filter=-build/include_subdir \
              --recursive \
              --repository=application \
              --verbose=2 \
              --linelength=120 \
              application/

# ----------------------------
# –≠—Ç–∞–ø: –î–µ–ø–ª–æ–π Python (WDev)
# ----------------------------
deploy-python:
  <<: *wdev-rules
  stage: deploy
  environment:
    name: production
    url: http://${SERVER_IP}
  needs: ["python-tests"]
  script:
    - |
      echo "Deploying Python projects..."
      for project in team_website application_website; do
        if [ -d "$project" ]; then
          echo "Deploying $project to ${SERVER_IP}"
          ssh -o StrictHostKeyChecking=no root@${SERVER_IP} "
            cd ${PROJECT_DIR}/${project} &&
            git fetch &&
            git reset --hard origin/WDev &&
            docker compose down &&
            docker compose up -d --build
          "
        fi
      done

# ----------------------------
# –≠—Ç–∞–ø: –°–±–æ—Ä–∫–∞ C++ (DDev)
# ----------------------------
build-cpp:
  <<: *ddev-rules
  stage: deploy
  tags:
    - cpp
  script:
    - |
      echo "Building C++ project..."
      cd application
      mkdir -p build
      cd build
      cmake ..
      make
  artifacts:
    paths:
      - application/build/
    expire_in: 1 week 


build-docs:
  stage: docs
  image: python:3.11
  before_script:
    - pip install sphinx sphinx-rtd-theme
    - cd team_website
  script:
    - sphinx-apidoc -f -o docs/source main_app
    - sphinx-build -b html docs/source docs/build
    - mkdir -p static/docs/
    - cp -r docs/build/* static/docs/
  artifacts:
    paths:
      - team_website/main_app/static/docs/

# ----------------------------
# –°–±–æ—Ä–∫–∞ C++ (—Ç–æ–ª—å–∫–æ main)
# ----------------------------
build-cpp-release:
  stage: build
  <<: *main-rules
  tags:
    - cpp
  script:
    - |
      echo "üîß Building C++ application..."
      cd application
      mkdir -p build_release && cd build_release
      cmake -DCMAKE_BUILD_TYPE=Release ..
      make -j$(nproc)
      
      if [ ! -f "$CPP_EXE_NAME" ]; then
        echo "‚ùå Executable not found!"
        exit 1
      fi
  artifacts:
    paths:
      - application/build_release/$CPP_EXE_NAME
    expire_in: 1 week

# ----------------------------
# –î–µ–ø–ª–æ–π C++ (—Ç–æ–ª—å–∫–æ main)
# ----------------------------
deploy-cpp-app:
  stage: deploy
  <<: *main-rules
  needs: ["build-cpp-release"]
  tags:
    - deploy
  before_script:
    - apt-get update -qq
    - apt-get install -y openssh-client
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ssh-keyscan $SERVER_IP >> ~/.ssh/known_hosts
  script:
    - |
      echo "üöÄ Deploying C++ app to $CPP_DEPLOY_DIR..."
      
      scp application/build_release/$CPP_EXE_NAME root@$SERVER_IP:$CPP_DEPLOY_DIR/
      
      ssh root@$SERVER_IP "
        mkdir -p $CPP_DEPLOY_DIR && 
        chmod +x $CPP_DEPLOY_DIR/$CPP_EXE_NAME &&
        echo '‚úÖ Deployment complete!'
      "
  after_script:
    - rm -f ~/.ssh/id_rsa

