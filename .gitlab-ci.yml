# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

stages:
  - build
  - test
  - deploy

variables:
  DOCKER_HOST: "tcp://docker:2375"
  DOCKER_DRIVER: "overlay2"
  PROJECT_DIR: "/opt/final-project"

# ----------------------------
# Application Website (Python)
# ----------------------------
build-app-website:
  stage: build
  rules:
    - if: '$CI_COMMIT_REF_NAME == "WDev"'
      changes:
        - application_website/**/*
        - docker-compose.yml
        - .gitlab-ci.yml
  script:
    - echo "Building Application Website..."
    - cd application_website
    - docker-compose build
    - cd ..

test-app-website:
  stage: test
  rules:
    - if: '$CI_COMMIT_REF_NAME == "WDev"'
      changes:
        - application_website/**/*
  script:
    - echo "Testing Application Website..."
    - cd application_website
    - cd ..

# --------------------
# Team Website (Python)
# --------------------
build-team-website:
  stage: build
  rules:
    - if: '$CI_COMMIT_REF_NAME == "WDev"'
      changes:
        - team_website/**/*
        - docker-compose.yml
        - .gitlab-ci.yml
  script:
    - echo "Building Team Website..."
    - cd team_website
    - docker-compose build
    - cd ..

test-team-website:
  stage: test
  rules:
    - if: '$CI_COMMIT_REF_NAME == "WDev"'
      changes:
        - team_website/**/*
  script:
    - echo "Testing Team Website..."
    - cd team_website
    - docker-compose run --rm web python manage.py test
    - docker-compose run --rm web flake8 .
    - cd ..

# -----------------
# Deploy (Both Python projects)
# -----------------
deploy-app-website:
  stage: deploy
  rules:
    - if: '$CI_COMMIT_REF_NAME == "WDev"'
      changes:
        - application_website/**/*
      when: manual
  environment:
    name: production
    url: http://$SERVER_IP
  script:
    - echo "Deploying Application Website..."
    - 'ssh -o StrictHostKeyChecking=no root@$SERVER_IP "cd $PROJECT_DIR/application_website && git fetch && git reset --hard origin/WDev && docker compose down && docker compose up -d --build"'

deploy-team-website:
  stage: deploy
  rules:
    - if: '$CI_COMMIT_REF_NAME == "WDev"'
      changes:
        - team_website/**/*
  environment:
    name: production
    url: http://$SERVER_IP
  script:
    - echo "Deploying Team Website..."
    - 'ssh -o StrictHostKeyChecking=no root@$SERVER_IP "cd $PROJECT_DIR/team_website && git fetch && git reset --hard origin/WDev && docker compose down && docker compose up -d --build"'

# Общая очистка
cleanup:
  stage: deploy
  rules:
    - if: '$CI_COMMIT_REF_NAME == "WDev"'
  script:
    - echo "Cleaning up..."
    - docker system prune -f
  when: always
